def label = "mypod-${UUID.randomUUID().toString()}"
podTemplate(label: label, cloud: 'kubernetes',containers: [
    containerTemplate(
        name: 'jnlp', 
        image: 'jenkinsci/jnlp-slave', 
        alwaysPullImage: false),
  ],
     volumes: [
        hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
        hostPathVolume(mountPath: '/usr/bin/docker', hostPath: '/usr/bin/docker'),
        hostPathVolume(mountPath: '/usr/local/jdk', hostPath: '/usr/local/jdk'),
        hostPathVolume(mountPath: '/usr/local/maven', hostPath: '/usr/local/maven'),
  ],) {

    node(label){
      stage('Git Checkout'){
         checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/chuncui0207/Asp.net-Core-k8s.git']]])
      }
      stage('Unit Testing'){
      	echo "Unit Testing..."
      }
      stage('Build and Push Image'){
          sh '''
          ls
          docker images
          '''
      }
      stage('Deploy to K8S'){
          kubernetesDeploy configs: 'deploy/deploy.yaml', kubeConfig: [path: ''], kubeconfigId: '1cb90ef1-4a7f-40c9-a6dd-bb6994017da4', secretName: '', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']
      }
      stage('Testing'){
          echo "Testing..."
      }
  }
}
